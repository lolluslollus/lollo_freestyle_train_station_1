function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local constants = require('lollo_freestyle_train_station.constants')
    local fenceModelHelper = require('lollo_fence.modelHelper')
    local logger = require('lollo_freestyle_train_station.logger')
    local transfUtils = require('lollo_freestyle_train_station.transfUtils')

    local function _addGround(transf, result, zStart, zShiftOverDefaultPlatformHeight, wallBaseModelId, wallBehindModelId, isDoTerrain, isLowerTerrain, isRaiseTerrain, isWallBehindThick, numWalls)
        if not(isDoTerrain) then return end

        local _yShift = isRaiseTerrain and ((numWalls -1) * constants.wallSkew * constants.wallHeight) or 0
        local _yInward = -0.2
        local _yMiddle = isLowerTerrain and (not(wallBehindModelId) and 0.3 or (isWallBehindThick and 2.3 or 1.3)) or 0.2
        local _yOutward = (isLowerTerrain and (not(wallBehindModelId) and 0.7 or (isWallBehindThick and 2.7 or 1.7)) or (not(wallBehindModelId) and 0.5 or 1.0)) + _yShift
        local _zInward = 2*math.max(zShiftOverDefaultPlatformHeight, 0) - zStart -- platforms lower than default: we sink them into the ground; higher platforms: we adjust the terrain
        local _zDeltaOutward = (wallBaseModelId == nil) and 0.2 or -constants.wallBaseHeight
        if isLowerTerrain then _zDeltaOutward = _zDeltaOutward -constants.wallHeight -- +0.3 --adjusted to smooth it out a bit
        elseif isRaiseTerrain then _zDeltaOutward = constants.wallHeight * numWalls -- -0.3 --adjusted to smooth it out a bit
        end
        local _zOutward = zShiftOverDefaultPlatformHeight + _zDeltaOutward
        logger.infoOut('_yInward =', _yInward, '_yMiddle =', _yMiddle, '_yOutward =', _yOutward, '_zInward =', _zInward, '; _zOutward =', _zOutward)
        local _facesTransformed = (isRaiseTerrain or isLowerTerrain)
            and {
                transfUtils.getFaceTransformed_FAST(
                    transf,
                    {
                        {-0.5, _yInward, _zInward, 1.0},
                        {0.5, _yInward, _zInward, 1.0},
                        {0.5, _yMiddle, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        {-0.5, _yMiddle, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        -- {x, positive outwards, z, 1}
                    }
                ),
                transfUtils.getFaceTransformed_FAST(
                    transf,
                    {
                        -- {-0.5, _yMiddle, _zOutward, 1.0},
                        -- {0.5, _yMiddle, _zOutward, 1.0},
                        {-0.5, _yMiddle, _zInward, 1.0},
                        {0.5, _yMiddle, _zInward, 1.0},
                        {0.5, _yOutward, _zOutward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        {-0.5, _yOutward, _zOutward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        -- {x, positive outwards, z, 1}
                    }
                )
            } or {
                transfUtils.getFaceTransformed_FAST(
                    transf,
                    {
                        {-0.5, _yInward, _zInward, 1.0},
                        {0.5, _yInward, _zInward, 1.0},
                        {0.5, _yOutward, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        {-0.5, _yOutward, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                        -- {x, positive outwards, z, 1}
                    }
                )
            }

        if not(isRaiseTerrain) then
            table.insert(
                result.groundFaces,
                {
                    face = _facesTransformed[1],
                    loop = true,
                    modes = {
                        {
                            type = 'FILL',
                            key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                        }
                    }
                }
            )
        end

        table.insert(
            result.terrainAlignmentLists,
            {
                faces =  {_facesTransformed[1]},
                optional = true,
                slopeHigh = 9.9,
                slopeLow = 9.6,
                type = 'EQUAL',
            }
        )
        if isRaiseTerrain then
            table.insert(
                result.terrainAlignmentLists,
                {
                    faces =  {_facesTransformed[2]},
                    optional = true,
                    slopeHigh = 9.9,
                    slopeLow = 0.9,
                    -- type = 'EQUAL',
                    -- type = 'LESS',
                    type = 'GREATER',
                }
            )
        elseif isLowerTerrain then
            table.insert(
                result.terrainAlignmentLists,
                {
                    faces =  {_facesTransformed[2]},
                    optional = true,
                    slopeHigh = 9.9,
                    slopeLow = 0.9,
                    -- type = 'EQUAL',
                    type = 'LESS',
                    -- type = 'GREATER',
                }
            )
        end

        if (logger.isExtendedLog()) then
            table.insert(
                result.models,
                    {
                        id = 'lollo_freestyle_train_station/icon/arrows_mid_blue.mdl',
                        transf = transfUtils.getTransf_Shifted(transf, {0, _yOutward, _zOutward})
                    }
            )
            table.insert(
                result.models,
                    {
                        id = 'lollo_freestyle_train_station/icon/arrows_mid_blue.mdl',
                        transf = transfUtils.getTransf_Shifted(transf, {0, _yInward-1, _zInward})
                    }
            )
        end
    end

    local function _addWall(transf, result, wallMainModelId, wallBaseModelId, zShift, numWalls, isSkewed)
        local _transfShifted = transfUtils.getTransf_ZShifted(transf, zShift)
        local _transfSkewed = isSkewed and transfUtils.getTransf_ZSkewedOnY(_transfShifted, constants.wallSkew) or _transfShifted

        if wallBaseModelId ~= nil then
            result.models[#result.models+1] = {
                id = wallBaseModelId,
                transf = _transfSkewed
            }
        end
        if wallMainModelId ~= nil then
            if isSkewed then
                -- the skew can change the wall size, the farther a wall is from the curve centre
                local xLeft = transfUtils.getVec123Transformed({-0.5, 0, 0}, _transfSkewed)
                local xRight = transfUtils.getVec123Transformed({0.5, 0, 0}, _transfSkewed)
                local xLength_power2 = transfUtils.getVectorLength_power2({xRight[1] - xLeft[1], xRight[2] - xLeft[2], xRight[3] - xLeft[3]})
                logger.infoOut('xLength_power2 for asset wall =', xLength_power2)
                local xLength = xLength_power2 and math.sqrt(xLength_power2) or 1
                logger.infoOut('xLength for asset wall =', xLength)

                for i = 1, numWalls, 1 do
                    _transfSkewed = transfUtils.getTransf_XScaled(_transfSkewed, (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1)
                    -- logger.infoOut('(xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1 =', (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1, 'i =', i)
                    result.models[#result.models+1] = {
                        id = wallMainModelId,
                        transf = _transfSkewed
                    }
                    _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
                end
            else
                for i = 1, numWalls, 1 do
                    result.models[#result.models+1] = {
                        id = wallMainModelId,
                        transf = _transfSkewed
                    }
                    _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
                end
            end
        end
    end

    local function _addWallBehind(transf, result, zDelta, zRotRad, wallBehindModelId, wallBehindBaseModelId, zShift, numWalls, isSkewed)
        if wallBehindModelId == nil then return end

        local _wallBehindTransf = zRotRad >= 0
            and transfUtils.getTransf_XSkewedOnZ(transf, zDelta) -- this will never look perfect, it's in the nature of transformations
            or transfUtils.getTransf_XSkewedOnZ(
                transfUtils.getTransf_XScaled(transf, 1 -zRotRad), -- all walls behind are 1m deep
                zDelta * (1 -zRotRad)
            )
        local _transfShifted = transfUtils.getTransf_ZShifted(_wallBehindTransf, zShift)
        local _transfSkewed = isSkewed and transfUtils.getTransf_ZSkewedOnY(_transfShifted, constants.wallSkew) or _transfShifted

        if wallBehindBaseModelId ~= nil then
            table.insert(
                result.models,
                {
                    id = wallBehindBaseModelId,
                    transf = _transfSkewed
                }
            )
        end
        if isSkewed then
            -- the skew can change the wall size, the farther a wall is from the curve centre
            local xLeft = transfUtils.getVec123Transformed({-0.5, 0, 0}, _transfSkewed)
            local xRight = transfUtils.getVec123Transformed({0.5, 0, 0}, _transfSkewed)
            local xLength_power2 = transfUtils.getVectorLength_power2({xRight[1] - xLeft[1], xRight[2] - xLeft[2], xRight[3] - xLeft[3]})
            logger.infoOut('xLength_power2 for asset wall behind =', xLength_power2)
            local xLength = xLength_power2 and math.sqrt(xLength_power2) or 1
            logger.infoOut('xLength for asset wall behind =', xLength)

            for i = 1, numWalls, 1 do
                _transfSkewed = transfUtils.getTransf_XScaled(_transfSkewed, (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1)
                -- logger.infoOut('(xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1 =', (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1, 'i =', i)
                table.insert(
                    result.models,
                    {
                        id = wallBehindModelId,
                        transf = _transfSkewed
                    }
                )
                _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
            end
        else
            for i = 1, numWalls, 1 do
                table.insert(
                    result.models,
                    {
                        id = wallBehindModelId,
                        transf = _transfSkewed
                    }
                )
                _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
            end
        end
    end

	return {
        -- type = 'ASSET_DEFAULT',
        type = 'ASSET_TRACK', -- this is not the same as snapping.rail below, coz it lowers the asset to the ground.
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'fences', 'stairs' },
		description = {
			name = _('FenceAssetsName'),
			description = _('FenceAssetsDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/fence_assets.tga',
		},
		order = 104,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        snapping = {
			rail = true,
			road = true,
			water = false
		},
		params = fenceModelHelper.getConParams(),
		updateFn = function(params)
            logger.infoOut('fenceAssetsScript.updateFn firing, params with no state =', arrayUtils.cloneDeepOmittingFields(params, {'state'}, true))
            local _initParams = function()
                local defaults = fenceModelHelper.getDefaultIndexes()
                params.lolloFenceAssets_doTerrain = params.lolloFenceAssets_doTerrain or defaults.lolloFenceAssets_doTerrain
                params.lolloFenceAssets_isSkewed = params.lolloFenceAssets_isSkewed or defaults.lolloFenceAssets_isSkewed
                params.lolloFenceAssets_isWallBehindThick = params.lolloFenceAssets_isWallBehindThick or defaults.lolloFenceAssets_isWallBehindThick
                -- params.lolloFenceAssets_isWallTall = params.lolloFenceAssets_isWallTall or defaults.lolloFenceAssets_isWallTall
                params.lolloFenceAssets_length = params.lolloFenceAssets_length or defaults.lolloFenceAssets_length
                params.lolloFenceAssets_model = params.lolloFenceAssets_model or defaults.lolloFenceAssets_model
                params.lolloFenceAssets_numWalls = params.lolloFenceAssets_numWalls or defaults.lolloFenceAssets_numWalls
                params.lolloFenceAssets_wallEraPrefix = params.lolloFenceAssets_wallEraPrefix or defaults.lolloFenceAssets_wallEraPrefix
                params.lolloFenceAssets_wallBehindModel = params.lolloFenceAssets_wallBehindModel or defaults.lolloFenceAssets_wallBehindModel
                params.lolloFenceAssets_yShift = params.lolloFenceAssets_yShift or defaults.lolloFenceAssets_yShift
                params.lolloFenceAssets_yShiftFine = params.lolloFenceAssets_yShiftFine or defaults.lolloFenceAssets_yShiftFine
                params.lolloFenceAssets_zDelta = params.lolloFenceAssets_zDelta or defaults.lolloFenceAssets_zDelta
                params.lolloFenceAssets_zRotation = params.lolloFenceAssets_zRotation or defaults.lolloFenceAssets_zRotation
                params.lolloFenceAssets_zShift = params.lolloFenceAssets_zShift or defaults.lolloFenceAssets_zShift
            end
            _initParams()

            -- we don't use paramX and paramY coz they are awkward here
            -- they cycle in steps of math.pi / 16, just in case you want to add them.

            local function _getWallBaseModelId()
                local modelId = nil
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
                end
                return modelId
            end

            local function _getWallBehindBaseModelId()
                if not(fenceModelHelper.getWallBehindModels(false, params.lolloFenceAssets_isWallBehindThick == 1)[params.lolloFenceAssets_wallBehindModel + 1].fileName) then return nil end

                local modelId = nil
                if (params.lolloFenceAssets_isWallBehindThick == 1) then
                    if params.lolloFenceAssets_wallEraPrefix == 1 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m_2m_thick.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m_2m_thick.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m_2m_thick.mdl'
                    end
                else
                    if params.lolloFenceAssets_wallEraPrefix == 1 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                        modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m.mdl'
                    end
                end
                return modelId
            end

            local function _getYStart()
                local result = fenceModelHelper.getYShiftActualValues()[params.lolloFenceAssets_yShift + 1]
                    + fenceModelHelper.getYShiftFineActualValues()[params.lolloFenceAssets_yShiftFine + 1]
                return result
            end

            local function _getZDelta()
                local result = fenceModelHelper.getZDeltaActualValues()[params.lolloFenceAssets_zDelta + 1]
                return result
            end

            local function _getZRotationParameters()
                local zRotRad = params.lolloFenceAssets_length == 0
                    and 0
                    or fenceModelHelper.getZRotationActualValues()[params.lolloFenceAssets_zRotation + 1] / (params.lolloFenceAssets_length)

                local yShift = math.sin(zRotRad) * 0.5 -- walls are 1 m wide and their axes are centred at the bottom middle rear. They are about 0.1 m thick.
                local xShift = math.cos(zRotRad) * 0.5 + 0.5
                if zRotRad > 0 then -- compensate for XYZ decentering in the model, which is required for other purposes
                    xShift = xShift - 0.097 * math.sin(zRotRad)
                    yShift = yShift - 0.097 * (1 - math.cos(zRotRad))
                end

                return xShift, yShift, zRotRad
            end

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = { -- dummy ground faces so this is treated as a proper construction, and the construction mover can adjust it
                    {
                        face = {
                            {0.1, -0.1, 0.0, 1.0},
                            {0.1, 0.1, 0.0, 1.0},
                            {-0.1, 0.1, 0.0, 1.0},
                            {-0.1, -0.1, 0.0, 1.0},
                        },
                        modes = {
                            {
                                type = 'FILL',
                                key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                            }
                        }
                    },
                },
                models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
                terrainAlignmentLists = { {
                    type = 'EQUAL',
                    optional = true,
                    faces =  { }
                } },
            }

            local function _addModels()
                local isDoTerrain = params.lolloFenceAssets_doTerrain == 1 or params.lolloFenceAssets_doTerrain == 2 or params.lolloFenceAssets_doTerrain == 3
                local isLowerTerrain = params.lolloFenceAssets_doTerrain == 3
                local isRaiseTerrain = params.lolloFenceAssets_doTerrain == 2
                local isSkewed = params.lolloFenceAssets_isSkewed == 1
                local isWallBehindThick = (params.lolloFenceAssets_isWallBehindThick == 1)
                -- local wallMainModelId = fenceModelHelper.getModels(params.lolloFenceAssets_isWallTall == 1)[params.lolloFenceAssets_model + 1].fileName
                local wallMainModelId = fenceModelHelper.getModels(false)[params.lolloFenceAssets_model + 1].fileName
                local wallBaseModelId = _getWallBaseModelId()
                local wallBehindBaseModelId = _getWallBehindBaseModelId()
                -- local wallBehindModelId = fenceModelHelper.getWallBehindModels(params.lolloFenceAssets_isWallTall == 1, params.lolloFenceAssets_isWallBehindThick == 1)[params.lolloFenceAssets_wallBehindModel + 1].fileName
                local wallBehindModelId = fenceModelHelper.getWallBehindModels(false, params.lolloFenceAssets_isWallBehindThick == 1)[params.lolloFenceAssets_wallBehindModel + 1].fileName
                logger.infoOut(
                    '_addModels got isDoTerrain =', isDoTerrain,
                    'wallMainModelId =', wallMainModelId,
                    'wallBaseModelId =', wallBaseModelId,
                    'wallBehindBaseModelId =', wallBehindBaseModelId,
                    'wallBehindModelId =', wallBehindModelId
                )
                -- make sure something appears even if the models are all nil, so the costruction will not stay around as a ghost
                if not(wallMainModelId) and not(wallBaseModelId) and not(wallBehindModelId) then
                    result.labelText = {
                        [0] = { _('wallWithNoModelsHere'), _('wallWithNoModelsHere') }
                    }
                    result.models = {{
                        id = constants.yellowMessageModelFileName,
                        transf = constants.idTransf
                    }}
                    return
                end

                local _yStart = _getYStart()
                local _zShift = fenceModelHelper.getZShiftActualValues()[params.lolloFenceAssets_zShift + 1] -- it is 0 when the platform height is 0.8, which is the default
                -- This is level with freestyle stations and looks good.
                local _zStart = ((wallBaseModelId == nil) and -0.2 or constants.defaultPlatformHeight) + _zShift
                local _xShift, _yShift, _zRotRad = _getZRotationParameters()
                local zDelta = _getZDelta()
                local _numWalls = fenceModelHelper.getNumWallsActualValues()[params.lolloFenceAssets_numWalls + 1]
                logger.infoOut('_addModels got zRotRad =', 180 / math.pi * _zRotRad, ', xShift =', _xShift, ', yShift =', _yShift, ', yStart =', _yStart, ', zDelta =', zDelta, ', zShift =', _zShift, ', zStart =', _zStart)

                local transf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, _yStart, _zStart, 1
                }
                for i = 1, params.lolloFenceAssets_length + 1, 1 do
                    local skewedTransf = transfUtils.getTransf_XSkewedOnZ(transf, zDelta)
                    _addWall(skewedTransf, result, wallMainModelId, wallBaseModelId, _zShift, _numWalls, isSkewed)
                    _addGround(skewedTransf, result, _zStart, _zShift, wallBaseModelId, wallBehindModelId, isDoTerrain, isLowerTerrain, isRaiseTerrain, isWallBehindThick, _numWalls)
                    _addWallBehind(transf, result, zDelta, _zRotRad, wallBehindModelId, wallBehindBaseModelId, _zShift, _numWalls, isSkewed)
                    transf = transfUtils.getTransf_ZRotated_Shifted(
                        transf,
                        _zRotRad,
                        {_xShift, _yShift, zDelta * _xShift}
                    )
                end
            end
            _addModels()

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
