function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local _autoBridgePathsHelper = require('lollo_freestyle_train_station.autoBridgePathsHelper')
    local _constants = require('lollo_freestyle_train_station.constants')
    local logger = require('lollo_freestyle_train_station.logger')
    local _openLiftOpenStairsHelpers = require('lollo_open_lifts_open_stairs_free.openLiftOpenStairsHelpers')

    local function _myErrorHandler(err)
        print('lollo pedestrianBridgePillar.con ERROR: ', err)
    end

    local _paramValues = _openLiftOpenStairsHelpers.paramValues.pedestrianBridgePillar
    local _paramReaders = _openLiftOpenStairsHelpers.paramReaders.pedestrianBridgePillar

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('PedestrianBridgePillarName'),
			description = _('PedestrianBridgePillarDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/pedestrianBridgePillar.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 999,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true, -- false,
        snapping = {
            rail = true,
            road = true,
            water = false,
        },
        params = {
            {
                defaultIndex = 7,
                key = 'pedestrian_bridge_pillar_height',
                name = _('PedestrianBridgePillarHeight'),
                uiType = 'SLIDER',
                values = _paramValues.pedestrian_bridge_pillar_height,
            },
            {
                key = 'era_prefix',
                name = _('Era'),
                values = _paramValues.era_prefix,
            },
        },
		updateFn = function(params)
            logger.print('pedestrianBridgePillar.updateFn firing, params = ') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}))
            local _era_prefix = _paramReaders.getEraPrefix(params)
            local _height = _paramReaders.getHeight(params)
            local _face = {
                {-0.5, -0.5, -_height, 1}, {-0.5, 0.5, -_height, 1}, {0.5, 0.5, -_height, 1}, {0.5, -0.5, -_height, 1}
            }
            local _groundFacesFillKey = _constants[_era_prefix .. 'groundFacesFillKey']

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    {
                        face = _face,
                        loop = true,
                        modes = {
                            {
                                key = _groundFacesFillKey,
                                type = 'FILL',
                            },
                        },
                    },
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    -- {
                    --     id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                    --     transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1},
                    -- },
                },
                terrainAlignmentLists = {
                    {
                        type = 'EQUAL',
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeHigh = 9.9,
                        slopeLow = 9.6,
                        faces = { _face },
                    },
                },
            }

            local _addModels = function()
                local _modelId = 'lollo_freestyle_train_station/open_stairs_free/' .. _era_prefix .. 'pillar_1m.mdl'
                for i = 1, _height, 1 do
                    table.insert(
                        result.models,
                        {
                            id = _modelId,
                            transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, -i, 1},
                        }
                    )
                end
            end

            xpcall(
                function()
                    _addModels()
                end,
                _myErrorHandler
            )
            print('result.models =') debugPrint(result.models)
			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
