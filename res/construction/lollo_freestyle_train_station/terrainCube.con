local constants = require('lollo_freestyle_train_station.constants')
local logger = require('lollo_freestyle_train_station.logger')

function data()
    local _paramConstants = {
        lollo_terrain_cube_x_10m = {
            max = 40,
            min = 0,
            step = 10,
        },
        lollo_terrain_cube_y_10m = {
            max = 40,
            min = 0,
            step = 10,
        },
        lollo_terrain_cube_z_10m = {
            max = 40,
            min = -40,
            step = 10,
        },
        lollo_terrain_cube_x_1m = {
            max = 10,
            min = 1,
            step = 1,
        },
        lollo_terrain_cube_y_1m = {
            max = 10,
            min = 1,
            step = 1,
        },
        lollo_terrain_cube_z_1m = {
            max = 10,
            min = -10,
            step = 1,
        },
    }
    -- LOLLO TODO fix negative Z
    local _paramHelpers = {
        MinusN2PlusN = {
            getSliderValues = function(paramKey)
                local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
                local results = {}
                for i = -max, max, step do
                    results[#results+1] = tostring(i)
                end
                return results
            end,
            getSliderMiddleValue = function(paramKey)
                local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
                return math.floor(max / step)
            end,
            getValueFromSliderParamValue = function(paramKey, paramValue)
                local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
                return -max + step * paramValue
            end,
        },
        Nought2PlusN = {
            getSliderValues = function(paramKey)
                local max, min, step = _paramConstants[paramKey].max, _paramConstants[paramKey].min, _paramConstants[paramKey].step
                local results = {}
                for i = min, max, step do
                    results[#results+1] = tostring(i)
                end
                return results
            end,
            getSliderMiddleValue = function(paramKey)
                local max, min, step = _paramConstants[paramKey].max, _paramConstants[paramKey].min, _paramConstants[paramKey].step
                return math.floor((max - min) / step / 2)
            end,
            getValueFromSliderParamValue = function(paramKey, paramValue)
                local min, step = _paramConstants[paramKey].min, _paramConstants[paramKey].step
                return min + step * paramValue
            end,
        },
        terrainAlignmentType = {
            getValues = function()
                return {'EQUAL', 'LESS', 'GREATER'}
            end,
        },
    }

    return {
        type = 'ASSET_DEFAULT',
        description = {
            name = _('TerrainCubeName'),
            description = _('TerrainCubeDesc')
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        categories = { 'stairs' },
        order = 1105,
        autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        params = {
            {
                key = 'lollo_terrain_cube_x_10m',
                name = _('PlatformAsAsset_X10m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_terrain_cube_x_10m'),
                uiType = 'SLIDER',
                defaultIndex = 1,
                -- defaultIndex = _paramHelpers.Nought2PlusN.getSliderMiddleValue('lollo_terrain_cube_x_10m'),
            },
            {
                key = 'lollo_terrain_cube_x_1m',
                name = _('PlatformAsAsset_X1m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_terrain_cube_x_1m'),
                uiType = 'SLIDER',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_terrain_cube_y_10m',
                name = _('PlatformAsAsset_Y10m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_terrain_cube_y_10m'),
                uiType = 'SLIDER',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_terrain_cube_y_1m',
                name = _('PlatformAsAsset_Y1m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_terrain_cube_y_1m'),
                uiType = 'SLIDER',
                defaultIndex = 3,
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_terrain_cube_z_10m',
                name = _('PlatformAsAsset_Z10m'),
                values = _paramHelpers.MinusN2PlusN.getSliderValues('lollo_terrain_cube_z_10m'),
                uiType = 'SLIDER',
                defaultIndex = _paramHelpers.MinusN2PlusN.getSliderMiddleValue('lollo_terrain_cube_z_10m') + 1,
            },
            {
                key = 'lollo_terrain_cube_z_1m',
                name = _('PlatformAsAsset_Z1m'),
                values = _paramHelpers.MinusN2PlusN.getSliderValues('lollo_terrain_cube_z_1m'),
                uiType = 'SLIDER',
                defaultIndex = _paramHelpers.MinusN2PlusN.getSliderMiddleValue('lollo_terrain_cube_z_1m') + 1,
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_terrain_cube_terrain_alignment_type',
                name = _('TerrainAlignmentType'),
                values = _paramHelpers.terrainAlignmentType.getValues(),
                uiType = 'BUTTON',
            },
        },
        updateFn = function(params)
            logger.print('params =') logger.debugPrint(params)
            local result = {
                -- colliders = {},
                cost = 0,
                models = {},
            }

            local _xHalfSize = (
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_x_10m', params.lollo_terrain_cube_x_10m) +
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_x_1m', params.lollo_terrain_cube_x_1m)
            ) / 2
            local _yHalfSize = (
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_y_10m', params.lollo_terrain_cube_y_10m) +
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_y_1m', params.lollo_terrain_cube_y_1m)
            ) / 2
            local _zHalfSize = (
                _paramHelpers.MinusN2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_z_10m', params.lollo_terrain_cube_z_10m) +
                _paramHelpers.MinusN2PlusN.getValueFromSliderParamValue('lollo_terrain_cube_z_1m', params.lollo_terrain_cube_z_1m)
            ) / 2

            logger.print('x Size =', _xHalfSize * 2, 'y Size =', _yHalfSize * 2, 'z Size =', _zHalfSize * 2)

            -- local _fileName = 'lollo_freestyle_train_station/railroad/assets/cube_1x1.mdl'
            -- for x = -_xHalfSize, _xHalfSize, 1 do
            --     for y = -_yHalfSize, _yHalfSize, 1 do
            --         for z = 0, _zHalfSize * 2, 1 do
            --             result.models[#result.models+1] = {
            --                 id = _fileName,
            --                 transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  x, y, z, 1}
            --             }
            --         end
            --     end
            -- end
            local _fileName = 'lollo_freestyle_train_station/icon/orange.mdl'
            result.models[#result.models+1] = {
                id = _fileName,
                transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, _zHalfSize, 1}
            }

            local _flatGroundFace = {
                {-_xHalfSize, -_yHalfSize, 2 * _zHalfSize, 1},
                {-_xHalfSize, _yHalfSize, 2 * _zHalfSize, 1},
                {_xHalfSize, _yHalfSize, 2 * _zHalfSize, 1},
                {_xHalfSize, -_yHalfSize, 2 * _zHalfSize, 1}
            }
            result.groundFaces = { -- the ground faces ignore z, the alignment lists don't
                {
                    face = _flatGroundFace,
                    loop = true,
                    modes = {
                        {
                            key = 'none.lua',
                            type = 'FILL',
                        },
                    }
                }
            }

            local _terrainAlignmentTypeIndex = (params.lollo_terrain_cube_terrain_alignment_type or 0)
            local _terrainAlignment = _paramHelpers.terrainAlignmentType.getValues()[_terrainAlignmentTypeIndex + 1]
            result.terrainAlignmentLists = {
                {
                    type = _terrainAlignment,
                    optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                    slopeLow = constants.slopeLow,
                    slopeHigh = constants.slopeHigh,
                    faces = { _flatGroundFace },
                },
            }
            logger.print('result =') logger.debugPrint(result)
            return result
        end,
        upgradeFn = function(params)
            return {}
        end,
    }
end
