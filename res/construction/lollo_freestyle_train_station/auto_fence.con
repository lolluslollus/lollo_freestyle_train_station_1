function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local constants = require('lollo_freestyle_train_station.constants')
    local fenceModelHelper = require('lollo_fence.modelHelper')
    local logger = require('lollo_freestyle_train_station.logger')
    local transfUtils = require('lollo_freestyle_train_station.transfUtils')

    local function _addGround(transf, yStart, zShiftOverDefaultPlatformHeight, result, wallBaseModelId, wallBehindModelId, isLowerTerrain, isRaiseTerrain, isWallBehindThick, numWalls)
        local _yShift = isRaiseTerrain and ((numWalls -1) * constants.wallSkew * constants.wallHeight) or 0
        local _yInward = -0.2
        local _yMiddle = (isLowerTerrain and (not(wallBehindModelId) and 0.3 or (isWallBehindThick and 2.3 or 1.3)) or 0.2) + yStart + _yShift
        local _yOutward = (isLowerTerrain and (not(wallBehindModelId) and 0.7 or (isWallBehindThick and 2.7 or 1.7)) or (not(wallBehindModelId) and 0.5 or 1.0)) + yStart + _yShift
        local _zInward = math.max(zShiftOverDefaultPlatformHeight, 0) -- platforms lower than default: we sink them into the ground; higher platforms: we adjust the terrain
        local _zDeltaOutward = 0
        if isLowerTerrain then _zDeltaOutward = (-constants.wallHeight - (wallBaseModelId == nil and 0 or constants.wallBaseHeight)) -- +0.3 --adjusted to smooth it out a bit
        elseif isRaiseTerrain then _zDeltaOutward = (constants.wallHeight * numWalls + (wallBaseModelId == nil and 0 or constants.wallBaseHeight)) -- -0.3 --adjusted to smooth it out a bit
        end
        local _zOutward = zShiftOverDefaultPlatformHeight + _zDeltaOutward
        logger.infoOut('_yInward =', _yInward, '_yMiddle =', _yMiddle, '_yOutward =', _yOutward, '_zInward =', _zInward, '; _zOutward =', _zOutward)
        local _facesTransformed = (isRaiseTerrain or isLowerTerrain)
        and {
            transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, _yInward, _zInward, 1.0},
                    {0.5, _yInward, _zInward, 1.0},
                    {0.5, _yMiddle, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                    {-0.5, _yMiddle, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                }
            ),
            transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, _yMiddle, _zInward, 1.0},
                    {0.5, _yMiddle, _zInward, 1.0},
                    {0.5, _yOutward, _zOutward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                    {-0.5, _yOutward, _zOutward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                }
            )
        } or {
            transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, _yInward, _zInward, 1.0},
                    {0.5, _yInward, _zInward, 1.0},
                    {0.5, _yOutward, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                    {-0.5, _yOutward, _zInward, 1.0}, -- smaller y integrates better with steep slopes but the earth might come into the station
                }
            )
        }

        if not(isRaiseTerrain) then
            table.insert(
                result.groundFaces,
                {
                    face = _facesTransformed[1],
                    loop = true,
                    modes = {
                        {
                            type = 'FILL',
                            key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                        }
                    }
                }
            )
        end

        table.insert(
            result.terrainAlignmentLists,
            {
                faces =  {_facesTransformed[1]},
                optional = true,
                slopeHigh = 9.9,
                slopeLow = 9.6,
                type = 'EQUAL',
            }
        )
        if isRaiseTerrain then
            table.insert(
                result.terrainAlignmentLists,
                {
                    faces =  {_facesTransformed[2]},
                    optional = true,
                    slopeHigh = 9.9,
                    slopeLow = 0.9,
                    -- type = 'EQUAL',
                    -- type = 'LESS',
                    type = 'GREATER',
                }
            )
        elseif isLowerTerrain then
            table.insert(
                result.terrainAlignmentLists,
                {
                    faces =  {_facesTransformed[2]},
                    optional = true,
                    slopeHigh = 9.9,
                    slopeLow = 0.9,
                    -- type = 'EQUAL',
                    type = 'LESS',
                    -- type = 'GREATER',
                }
            )
        end

        if logger.isExtendedLog() then
            table.insert(
                result.models,
                    {
                        id = 'lollo_freestyle_train_station/icon/arrows_mid_blue.mdl',
                        transf = transfUtils.getTransf_Shifted(transf, {0, _yOutward, _zOutward})
                    }
            )
            table.insert(
                result.models,
                    {
                        id = 'lollo_freestyle_train_station/icon/arrows_mid_blue.mdl',
                        transf = transfUtils.getTransf_Shifted(transf, {0, _yInward-1, _zInward})
                    }
            )
        end
    end

    local function _addWall(transf, result, yShift, zShift, wallMainModelId, wallBaseModelId, numWalls, isSkewed)
        local _transfShifted = transfUtils.getTransf_Shifted(transf, {0, yShift, zShift})
        local _transfSkewed = isSkewed and transfUtils.getTransf_ZSkewedOnY(_transfShifted, constants.wallSkew) or _transfShifted

        if wallBaseModelId ~= nil then
            table.insert(
                result.models,
                {
                    id = wallBaseModelId,
                    transf = _transfSkewed
                }
            )
        end
        if wallMainModelId ~= nil then
            if isSkewed then
                -- the skew can change the wall size, the farther a wall is from the curve centre
                local xLeft = transfUtils.getVec123Transformed({-0.5, 0, 0}, _transfSkewed)
                local xRight = transfUtils.getVec123Transformed({0.5, 0, 0}, _transfSkewed)
                local xLength_power2 = transfUtils.getVectorLength_power2({xRight[1] - xLeft[1], xRight[2] - xLeft[2], xRight[3] - xLeft[3]})
                local xLength = xLength_power2 and math.sqrt(xLength_power2) or 1
                logger.infoOut('xLength =', xLength)

                for i = 1, numWalls, 1 do
                    _transfSkewed = transfUtils.getTransf_XScaled(_transfSkewed, (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1)
                    -- logger.infoOut('(xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1 =', (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1, 'i =', i)
                    table.insert(
                        result.models,
                        {
                            id = wallMainModelId,
                            transf = _transfSkewed
                        }
                    )
                    _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
                end
            else
                for i = 1, numWalls, 1 do
                    table.insert(
                        result.models,
                        {
                            id = wallMainModelId,
                            transf = _transfSkewed
                        }
                    )
                    _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
                end
            end
        end
    end

    local function _addWallBehind(transf, result, yShift, zShift, wallBehindModelId, wallBehindBaseModelId, numWalls, isSkewed)
        if wallBehindModelId == nil then return end

        local _transfShifted = transfUtils.getTransf_Shifted(transf, {0, yShift, zShift})
        local _transfSkewed = isSkewed and transfUtils.getTransf_ZSkewedOnY(_transfShifted, constants.wallSkew) or _transfShifted

        if wallBehindBaseModelId ~= nil then
            table.insert(
                result.models,
                {
                    id = wallBehindBaseModelId,
                    transf = _transfSkewed
                }
            )
        end
        if isSkewed then
            -- the skew can change the wall size, the farther a wall is from the curve centre
            local xLeft = transfUtils.getVec123Transformed({-0.5, 0, 0}, _transfSkewed)
            local xRight = transfUtils.getVec123Transformed({0.5, 0, 0}, _transfSkewed)
            local xLength_power2 = transfUtils.getVectorLength_power2({xRight[1] - xLeft[1], xRight[2] - xLeft[2], xRight[3] - xLeft[3]})
            local xLength = xLength_power2 and math.sqrt(xLength_power2) or 1
            logger.infoOut('xLength for wall behind =', xLength)

            for i = 1, numWalls, 1 do
                _transfSkewed = transfUtils.getTransf_XScaled(_transfSkewed, (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1)
                -- logger.infoOut('(xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1 =', (xLength-1) * i * constants.wallSkewXAdjustmentFactor + 1, 'i =', i)
                table.insert(
                    result.models,
                    {
                        id = wallBehindModelId,
                        transf = _transfSkewed
                    }
                )
                _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
            end
        else
            for i = 1, numWalls, 1 do
                table.insert(
                    result.models,
                    {
                        id = wallBehindModelId,
                        transf = _transfSkewed
                    }
                )
                _transfSkewed = transfUtils.getTransf_ZShifted(_transfSkewed, constants.wallHeight)
            end
        end
    end

	return {
        -- type = 'ASSET_DEFAULT',
        type = 'ASSET_TRACK', -- this is not the same as snapping.rail below, coz it lowers the asset to the ground.
		availability = {
			yearFrom = -1,
			yearTo = -1,
		},
        categories = { 'stairs' },
		description = {
			name = _('FenceAssetsName'),
			description = _('FenceAssetsDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/fence_assets.tga',
		},
		order = 103,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        snapping = {
			rail = true,
			road = true,
			water = false
		},
		params = {},
		updateFn = function(params)
            logger.infoOut(
                'auto_fence.updateFn firing, some params =',
                arrayUtils.cloneDeepOmittingFields(
                    params,
                    {'state', 'transfs', 'transfs_ground', 'transfs_wallBehind'},
                    true
                )
            )
            local _initParams = function()
                -- allow adding new params to old cons that did not have them
                local defaults = fenceModelHelper.getDefaultIndexes()
                params.lolloFenceAssets_doTerrain = params.lolloFenceAssets_doTerrain or defaults.lolloFenceAssets_doTerrain
                params.lolloFenceAssets_isSkewed = params.lolloFenceAssets_isSkewed or defaults.lolloFenceAssets_isSkewed
                params.lolloFenceAssets_isTunnelWallLikeOutside = params.lolloFenceAssets_isTunnelWallLikeOutside or defaults.lolloFenceAssets_isTunnelWallLikeOutside
                params.lolloFenceAssets_isWallBehindThick = params.lolloFenceAssets_isWallBehindThick or defaults.lolloFenceAssets_isWallBehindThick
                params.lolloFenceAssets_isYFlipped = params.lolloFenceAssets_isYFlipped or defaults.lolloFenceAssets_isYFlipped
                params.lolloFenceAssets_model = params.lolloFenceAssets_model or defaults.lolloFenceAssets_model
                params.lolloFenceAssets_numWalls = params.lolloFenceAssets_numWalls or defaults.lolloFenceAssets_numWalls
                params.lolloFenceAssets_wallEraPrefix = params.lolloFenceAssets_wallEraPrefix or defaults.lolloFenceAssets_wallEraPrefix
                params.lolloFenceAssets_wallBehindOnBridges = params.lolloFenceAssets_wallBehindOnBridges or defaults.lolloFenceAssets_wallBehindOnBridges
                params.lolloFenceAssets_wallBehindInTunnels = params.lolloFenceAssets_wallBehindInTunnels or defaults.lolloFenceAssets_wallBehindInTunnels
                params.lolloFenceAssets_wallBehindModel = params.lolloFenceAssets_wallBehindModel or defaults.lolloFenceAssets_wallBehindModel
                params.lolloFenceAssets_yShiftFine = params.lolloFenceAssets_yShiftFine or defaults.lolloFenceAssets_yShiftFine
                params.lolloFenceAssets_zShift = params.lolloFenceAssets_zShift or defaults.lolloFenceAssets_zShift
                params.transfs = params.transfs or {} -- obsolete, it was an early release, newer releases have transfs_ground instead
                params.transfs_ground = params.transfs_ground or {}
                params.transfs_wallBehind = params.transfs_wallBehind or {}
                params.transfs_ground_yFlipped = params.transfs_ground_yFlipped or {}
                params.transfs_wallBehind_yFlipped = params.transfs_wallBehind_yFlipped or {}
            end
            _initParams()

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = { -- dummy ground faces so this is treated as a proper construction, and the construction mover can adjust it
                    {
                        face = {
                            {0.1, -0.1, 0.0, 1.0},
                            {0.1, 0.1, 0.0, 1.0},
                            {-0.1, 0.1, 0.0, 1.0},
                            {-0.1, -0.1, 0.0, 1.0},
                        },
                        modes = {
                            {
                                type = 'FILL',
                                key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                            }
                        }
                    },
                },
                models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
                terrainAlignmentLists = { {
                    type = 'EQUAL',
                    optional = true,
                    faces =  { }
                } },
            }

            local isFlipped = params.lolloFenceAssets_isYFlipped == 1 and #params.transfs_ground_yFlipped > 0 -- I try to be compatible with outdated versions
            local isSkewed = params.lolloFenceAssets_isSkewed == 1
            local isTunnelWallLikeOutside = params.lolloFenceAssets_isTunnelWallLikeOutside == 1
            local isWallBehindInTunnels = params.lolloFenceAssets_wallBehindInTunnels == 1
            local isWallBehindOnBridges = params.lolloFenceAssets_wallBehindOnBridges == 1
            local isWallBehindThick = (params.lolloFenceAssets_isWallBehindThick == 1)
            local isDoTerrain = params.lolloFenceAssets_doTerrain == 1 or params.lolloFenceAssets_doTerrain == 2 or params.lolloFenceAssets_doTerrain == 3
            local isRaiseTerrain = params.lolloFenceAssets_doTerrain == 2
            local isLowerTerrain = params.lolloFenceAssets_doTerrain == 3

            local wallMainModelId = fenceModelHelper.getModels()[params.lolloFenceAssets_model + 1].fileName
            local wallMainModelId_Tunnel = fenceModelHelper.getModels(true)[params.lolloFenceAssets_model + 1].fileName

            local wallBaseModelId = nil
            if params.lolloFenceAssets_wallEraPrefix == 1 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
            elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
            elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
            end
            local wallBaseModelId_Tunnel = wallBaseModelId or 'lollo_freestyle_train_station/trackWalls/tunnely_wall_base_5m.mdl' -- always add a wall base in tunnels so the walls reach the top

            local wallBehindModelId = fenceModelHelper.getWallBehindModels(false, params.lolloFenceAssets_isWallBehindThick == 1)[params.lolloFenceAssets_wallBehindModel + 1].fileName
            local wallBehindModelId_Tunnel = fenceModelHelper.getWallBehindModels(true, params.lolloFenceAssets_isWallBehindThick == 1)[params.lolloFenceAssets_wallBehindModel + 1].fileName

            local wallBehindBaseModelId = nil
            if wallBehindModelId ~= nil then
                if isWallBehindThick then
                    if params.lolloFenceAssets_wallEraPrefix == 1 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m_2m_thick.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m_2m_thick.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m_2m_thick.mdl'
                    end
                else
                    if params.lolloFenceAssets_wallEraPrefix == 1 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m.mdl'
                    elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                        wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m.mdl'
                    end
                end
            end
            local wallBehindBaseModelId_Tunnel = wallBehindBaseModelId
                or (isWallBehindThick and 'lollo_freestyle_train_station/trackWalls/behind/tunnely_wall_base_5m_2m_thick.mdl'
                    or 'lollo_freestyle_train_station/trackWalls/behind/tunnely_wall_base_5m.mdl')

            -- make sure something appears even if the models are all nil, so the costruction will not stay around as a ghost
            logger.infoOut('wallMainModelId =', wallMainModelId, 'wallBaseModelId =', wallBaseModelId, 'wallBehindModelId =', wallBehindModelId)
            if not(wallMainModelId) and not(wallBaseModelId) and not(wallBehindModelId) then
                result.labelText = {
                    [0] = { _('wallWithNoModelsHere'), _('wallWithNoModelsHere') }
                }
                result.models = {{
                    id = constants.yellowMessageModelFileName,
                    transf = constants.idTransf
                }}
                return result
            end
            -- warn about outdated version
            if not(params.transfs_ground) or not(params.transfs_wallBehind) or #params.transfs_ground == 0 or  #params.transfs_wallBehind == 0 then
                result.labelText = {
                    [0] = { _('OutdatedConstruction'), _('OutdatedConstruction') }
                }
                result.models = {{
                    id = constants.yellowMessageModelFileName,
                    transf = constants.idTransf
                }}
                return result
            end

            logger.infoOut('wallMainModelId =', wallMainModelId, '; wallBaseModelId =', wallBaseModelId, '; #params.transfs =', #params.transfs)
            local _yStart = fenceModelHelper.getYShiftFineActualValues()[params.lolloFenceAssets_yShiftFine + 1]
            local _zShift = fenceModelHelper.getZShiftActualValues()[params.lolloFenceAssets_zShift + 1] -- it is 0 when the platform height is 0.8, which is the default
            -- This is level with freestyle stations and looks good.
            local _zStart = ((wallBaseModelId == nil) and (constants.defaultPlatformHeight - constants.wallBaseHeight) or constants.defaultPlatformHeight) + _zShift
            local _zStart_Tunnel = constants.defaultPlatformHeight -- in tunnels, always add a wall base and ignore platform heights, so the walls reach the top

            local _numWalls = fenceModelHelper.getNumWallsActualValues()[params.lolloFenceAssets_numWalls + 1]
            logger.infoOut('_yStart =', _yStart, '; _zShift =', _zShift, '; _zStart =', _zStart)
            local _transfs_ground = isFlipped and params.transfs_ground_yFlipped or params.transfs_ground
            for _, transfData in pairs(_transfs_ground) do
                if not(transfData.hasLevelCrossing) then
                    if transfData.groundBridgeTunnel_012 == 2 and not(isTunnelWallLikeOutside) then -- tunnel
                        _addWall(transfData.transf, result, 0, _zStart_Tunnel, wallMainModelId_Tunnel, wallBaseModelId_Tunnel, _numWalls, isSkewed)
                    else -- ground, bridge or tunnel like outside
                        _addWall(transfData.transf, result, _yStart, _zStart, wallMainModelId, wallBaseModelId, _numWalls, isSkewed)
                    end
                    if isDoTerrain and transfData.groundBridgeTunnel_012 == 0 then -- ground
                        _addGround(transfData.transf, _yStart, _zShift, result, wallBaseModelId, wallBehindModelId, isLowerTerrain, isRaiseTerrain, isWallBehindThick, _numWalls)
                    end
                end
            end
            local _transfs_wallBehind = isFlipped and params.transfs_wallBehind_yFlipped or params.transfs_wallBehind
            for _, transfData in pairs(_transfs_wallBehind) do
                if not(transfData.hasLevelCrossing) then
                    if transfData.groundBridgeTunnel_012 == 0 -- ground
                    or (transfData.groundBridgeTunnel_012 == 1 and isWallBehindOnBridges) -- bridge
                    or (transfData.groundBridgeTunnel_012 == 2 and isTunnelWallLikeOutside and isWallBehindInTunnels) -- tunnel
                    then
                        _addWallBehind(transfData.transf, result, _yStart,_zStart, wallBehindModelId, wallBehindBaseModelId, _numWalls, isSkewed)
                    elseif (transfData.groundBridgeTunnel_012 == 2 and isWallBehindInTunnels) then -- tunnel
                        _addWallBehind(transfData.transf, result, 0,_zStart_Tunnel, wallBehindModelId_Tunnel, wallBehindBaseModelId_Tunnel, _numWalls, isSkewed)
                    end
                end
            end

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
