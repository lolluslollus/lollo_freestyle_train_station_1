function data()
	local constants = require('lollo_freestyle_train_station.constants')
	local logger = require('lollo_freestyle_train_station.logger')
	local paramsutil = require 'paramsutil'

	local config = {
		trackTypes = { 'standard.lua', 'high_speed.lua' },
	}

	return {
		type = 'RAIL_DEPOT',
		description = {
			name = _('UndergroundTrainDepotName'),
			description = _('UndergroundTrainDepotDesc')
		},
		availability = {
            yearFrom = 0,
            yearTo = 0
        },
		params = {
			paramsutil.makeTrackTypeParam(),
			paramsutil.makeTrackCatenaryParam(),
		},
		updateFn = function(params)
			logger.infoOut('updateFn starting, params.upgrade =', params.upgrade)
			local trackHeight = params.state.track.railBase + params.state.track.railHeight
            -- LOLLO NOTE If some edges are not free, I will need a dummy model,
            -- otherwise the game will say "hello there" or "easter egg" or other rubbish,
            -- then point away (to some animal) and do nothing,
            -- when the user clicks on a done construction to configure it.
			local result = {
				-- colliders = {},
				cost = 18000,
				edgeLists = {
					{
						type = 'TRACK',
						params = {
							type = config.trackTypes[params.trackType and (params.trackType + 1) or 0],
							catenary = params.catenary == 1
						},
						edgeType = 'TUNNEL',
						edgeTypeName = 'railroad_old.lua',
						edges = {
							-- Edges must not completely overlap any lanes in the model.
							-- this edge is for real
							{ { 0, 39.1, -trackHeight }, { 0, -20.0, 0 } },
							{ { 0, 19.1, -trackHeight }, { 0, -20.0, 0 } },
							-- this edge is only for the looks.
							{ { 0, 19.1, -trackHeight }, { 0, -49.1, 0 } },
							{ { 0, -30, -trackHeight }, { 0, -49.1, 0 } },
							-- this edge is for real. I could use it to let trains enter from either end,
							-- but this end will not find the path."
							-- { { 0, -19.1, -trackHeight }, { 0, -20.0, 0 } },
							-- { { 0, -39.1, -trackHeight }, { 0, -20.0, 0 } },
						},
						-- freeNodes = { 0, },
						snapNodes = { 0, },
					}
				},
				groundFaces = { -- dummy ground faces so this is treated as a proper construction, and it won't say hello there
					{
						face = {
							{0.1, -0.1, 0.0, 1.0},
							{0.1, 0.1, 0.0, 1.0},
							{-0.1, 0.1, 0.0, 1.0},
							{-0.1, -0.1, 0.0, 1.0},
						},
						modes = {
							{
								type = 'FILL',
								key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
							}
						}
					},
				},
				models = {
					{
						id = 'lollo_freestyle_train_station/depot/underground_train_depot_era_a.mdl',
						transf = constants.idTransf
					},
				},
				terrainAlignmentLists = { {
					type = 'EQUAL',
					optional = true,
					faces = {}
				} }
			}

			if not(params.upgrade) then
				local xSize = 25
				local ySize = 100
				local face = {
					{-xSize, -ySize, 0}, {xSize, -ySize, 0}, {xSize, ySize, 0}, {-xSize, ySize, 0}
				}

				result.groundFaces[#result.groundFaces+1] = {
					-- face = groundFace,
					face = face,
					loop = true,
					modes = {
						{
							-- key = 'lollo_freestyle_train_station/hole.lua',
							key = 'hole.lua',
							type = 'FILL',
						},
					}
				}
				result.models[#result.models+1] = {
					id = 'lollo_freestyle_train_station/icon/yellow_huge.mdl',
					transf = {
						1, 0, 0, 0,
						0, 1, 0, 0,
						0, 0, 1, 0,
						0, 39.1, 0, 1
					}
				}
			end

			return result
		end,
		upgradeFn = function(params)
            return {}
        end,
	}
end
