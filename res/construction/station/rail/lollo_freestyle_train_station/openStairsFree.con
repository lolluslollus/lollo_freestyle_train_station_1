function data()
    local _arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local _autoBridgePathsHelper = require('lollo_freestyle_train_station.autoBridgePathsHelper')
    local _constants = require('lollo_freestyle_train_station.constants')
    local logger = require('lollo_freestyle_train_station.logger')
    local _modulesutilUG = require('modulesutil')
    local _openLiftOpenStairsHelpers = require('lollo_open_lifts_open_stairs_free.openLiftOpenStairsHelpers')
    local _transfUtilsUG = require('transf')

    local function _myErrorHandler(err)
        print('lollo openStairsFree.con ERROR: ', err)
    end

    local _paramValues = _openLiftOpenStairsHelpers.paramValues.stairs
    local _paramReaders = _openLiftOpenStairsHelpers.paramReaders.stairs

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenStairsFreeName'),
			description = _('OpenStairsFreeDesc'),
            icon = 'ui/construction/station/rail/lollo_freestyle_train_station/openStairsFree.tga',
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 501,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = false, -- true,
        params = _openLiftOpenStairsHelpers.getOpenStairsParamsMetadata(),
		updateFn = function(params)
            logger.print('openStairsFree.updateFn firing, params =') logger.debugPrint(_arrayUtils.cloneDeepOmittingFields(params, {'state'}, true))
            local _height = _paramReaders.getHeight(params)
            local _bridgeChunkLength = _paramReaders.getBridgeChunkLength(params)
            local _stairsBase = _paramReaders.getStairsBase(params)
            local _era_prefix = _paramReaders.getEraPrefix(params)
            local _autoBridgePathsRefData = _autoBridgePathsHelper.getData4Era(_era_prefix)

            local _yHalfSize = 1

            local baseLanesModelId = ''
            if _stairsBase == -1 then -- no base
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_short_'.. _height ..'m.mdl'
            elseif _stairsBase == 0 or _stairsBase == 1 or _stairsBase == 2 or _stairsBase == 3 then -- edge or snappy edge
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_fork_'.. _height ..'m.mdl'
            else -- model
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_expanded_'.. _height ..'m.mdl'
            end

            local topLanesModelId = ''
            if _bridgeChunkLength == -1 or _bridgeChunkLength == -2 then -- no bridge
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_linkable_'.. _height ..'m.mdl'
            elseif _bridgeChunkLength == 0 or _bridgeChunkLength == 1 or _bridgeChunkLength == 2 or _bridgeChunkLength == 3 then -- edge or bridge, snappy or not
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_unlinkable_fork_'.. _height ..'m.mdl'
            else -- model
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_unlinkable_'.. _height ..'m.mdl'
            end

            local _baseFaceZ = _stairsBase == 98 and -0.6 or 0
            local flatFaces = {}
            if _height == 2 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-4, _yHalfSize, _baseFaceZ}, {-4, -_yHalfSize, _baseFaceZ}
                } }
            elseif _height == 4 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-6, _yHalfSize, _baseFaceZ}, {-6, -_yHalfSize, _baseFaceZ}
                } }
            elseif _height == 6 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-8.5, _yHalfSize, _baseFaceZ}, {-8.5, -_yHalfSize, _baseFaceZ}
                } }
            elseif _height == 8 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-10.5, _yHalfSize, _baseFaceZ}, {-10.5, -_yHalfSize, _baseFaceZ}
                } }
            elseif _height == 10 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-12.5, _yHalfSize, _baseFaceZ}, {-12.5, -_yHalfSize, _baseFaceZ}
                } }
            end
            local slopedFaces = {}
            if _height == 2 then
                slopedFaces = { {
                    {0, -_yHalfSize, 1}, {0, _yHalfSize, 1}, {-4, _yHalfSize, -0.5 + _baseFaceZ}, {-4, -_yHalfSize, -0.5 + _baseFaceZ}
                } }
            elseif _height == 4 then
                slopedFaces = { {
                    {0, -_yHalfSize, 3}, {0, _yHalfSize, 3}, {-6, _yHalfSize, -0.5 + _baseFaceZ}, {-6, -_yHalfSize, -0.5 + _baseFaceZ}
                } }
            elseif _height == 6 then
                slopedFaces = { {
                    {0, -_yHalfSize, 5}, {0, _yHalfSize, 5}, {-8.5, _yHalfSize, -0.5 + _baseFaceZ}, {-8.5, -_yHalfSize, -0.5 + _baseFaceZ}
                } }
            elseif _height == 8 then
                slopedFaces = { {
                    {0, -_yHalfSize, 7}, {0, _yHalfSize, 7}, {-10.5, _yHalfSize, -0.5 + _baseFaceZ}, {-10.5, -_yHalfSize, -0.5 + _baseFaceZ}
                } }
            elseif _height == 10 then
                slopedFaces = { {
                    {0, -_yHalfSize, 9}, {0, _yHalfSize, 9}, {-12.5, _yHalfSize, -0.5 + _baseFaceZ}, {-12.5, -_yHalfSize, -0.5 + _baseFaceZ}
                } }
            end

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    {
                        id = 'lollo_freestyle_train_station/open_stairs_free/' .. _era_prefix .. (_bridgeChunkLength == -2 and 'open_stairs_no_top_railing_' or 'open_stairs_').. _height ..'m.mdl',
                        transf = _constants.idTransf,
                    },
                    {
                        id = baseLanesModelId,
                        transf = _constants.idTransf,
                    },
                    {
                        id = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_'.. _height ..'m.mdl',
                        transf = _constants.idTransf,
                    },
                    {
                        id = topLanesModelId,
                        transf = _constants.idTransf,
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = _paramReaders.getTerrainAlignmentType(params),
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = params.flat_sloped_terrain == 0 and flatFaces or slopedFaces,
                    },
                },
            }

            -- logger.print('_paramReaders.getTerrainAlignmentType(params) =', _paramReaders.getTerrainAlignmentType(params))

            local _addBase = function()
                if _stairsBase == -1 then
                    -- do nothing
                elseif _stairsBase == 0 or _stairsBase == 1 or _stairsBase == 2 or _stairsBase == 3 then -- edge or snappy edge
                    local _baseLen = 1
                    local edgeX0 = 0
                    if _height == 2 then
                        edgeX0 = -3.7
                    elseif _height == 4 then
                        edgeX0 = -5.7
                    elseif _height == 6 then
                        edgeX0 = -8.2
                    elseif _height == 8 then
                        edgeX0 = -10.2
                    elseif _height == 10 then
                        edgeX0 = -12.2
                    end
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = (_stairsBase == 0 or _stairsBase == 1) and true or false, -- only align on ground and in tunnels
                            edges = {
                                { { edgeX0, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 0 pos, tan
                                { { edgeX0 -_baseLen, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 1 pos, tan
                            },
                            edgeType = (_stairsBase == 2 or _stairsBase == 3) and 'BRIDGE' or nil,
                            edgeTypeName = (_stairsBase == 2 or _stairsBase == 3) and _autoBridgePathsRefData.bridgeTypeName_withRailing or nil,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = (_stairsBase == 1 or _stairsBase == 3) and { 1 } or { },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )

                    -- adjust the terrain so it does not cover the bridge
                    if (_stairsBase == 2 or _stairsBase == 3) then
                        table.insert(
                            result.terrainAlignmentLists,
                            { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                                type = 'LESS',
                                optional = true,
                                faces =  {{
                                    { edgeX0 -_baseLen, -_yHalfSize, 0 }, { edgeX0 -_baseLen, _yHalfSize, 0 },
                                    { edgeX0, _yHalfSize, 0 }, { edgeX0, -_yHalfSize, 0 },
                                }}
                            }
                        )
                    end
                    -- table.insert(
                    --     result.terrainAlignmentLists,
                    --     { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                    --         type = 'EQUAL',
                    --         optional = true,
                    --         faces =  { }
                    --     }
                    -- )
                else -- model
                    local modelId = 'lollo_freestyle_train_station/open_stairs_free/' .. _era_prefix .. 'open_stairs_base_' .. _height .. 'm.mdl'
                    table.insert(
                        result.models,
                        {
                            id = modelId,
                            transf = _constants.idTransf,
                        }
                    )

                    local baseFaces = {}
                    if _height == 2 then
                        baseFaces = { {
                            {-4, -_yHalfSize, _baseFaceZ}, {-4, _yHalfSize, _baseFaceZ}, {-5.5, _yHalfSize, _baseFaceZ}, {-5.5, -_yHalfSize, _baseFaceZ}
                        } }
                    elseif _height == 4 then
                        baseFaces = { {
                            {-6, -_yHalfSize, _baseFaceZ}, {-6, _yHalfSize, _baseFaceZ}, {-7.5, _yHalfSize, _baseFaceZ}, {-7.5, -_yHalfSize, _baseFaceZ}
                        } }
                    elseif _height == 6 then
                        baseFaces = { {
                            {-8.5, -_yHalfSize, _baseFaceZ}, {-8.5, _yHalfSize, _baseFaceZ}, {-10, _yHalfSize, _baseFaceZ}, {-10, -_yHalfSize, _baseFaceZ}
                        } }
                    elseif _height == 8 then
                        baseFaces = { {
                            {-10.5, -_yHalfSize, _baseFaceZ}, {-10.5, _yHalfSize, _baseFaceZ}, {-12, _yHalfSize, _baseFaceZ}, {-12, -_yHalfSize, _baseFaceZ}
                        } }
                    elseif _height == 10 then
                        baseFaces = { {
                            {-12.5, -_yHalfSize, _baseFaceZ}, {-12.5, _yHalfSize, _baseFaceZ}, {-14, _yHalfSize, _baseFaceZ}, {-14, -_yHalfSize, _baseFaceZ}
                        } }
                    end
                    table.insert(
                        result.terrainAlignmentLists,
                        {
                            type = 'EQUAL',
                            optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                            slopeLow = 9.6,
                            slopeHigh = 9.9,
                            faces = baseFaces,
                        }
                    )
                end
            end

            local _addBridge = function()
                if _bridgeChunkLength == 0 or _bridgeChunkLength == 1 then -- edge or snappy edge
                    local _bridgeLen = 2
                    local _zShift = _bridgeLen * _paramReaders.getSinYAngle(params)
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = true, -- only align on ground and in tunnels
                            edges = {
                                { { 0, 0, _height }, { _bridgeLen, 0, _zShift } },  -- node 0 pos, tan
                                { { _bridgeLen, 0, _height + _zShift}, { _bridgeLen, 0, _zShift } },  -- node 1 pos, tan
                            },
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeChunkLength == 0 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                elseif _bridgeChunkLength == 2 or _bridgeChunkLength == 3 then -- bridge or snappy bridge
                    local _bridgeLen = 2
                    local _zShift = _bridgeLen * _paramReaders.getSinYAngle(params)
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false, -- only align on ground and in tunnels
                            edges = {
                                { { 0, 0, _height }, { _bridgeLen, 0, _zShift } },  -- node 0 pos, tan
                                { { _bridgeLen, 0, _height + _zShift}, { _bridgeLen, 0, _zShift } },  -- node 1 pos, tan
                            },
                            edgeType = 'BRIDGE',
                            edgeTypeName = _autoBridgePathsRefData.bridgeTypeName_withRailing,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeChunkLength == 2 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    -- adjust the terrain so it does not cover the bridge
                    table.insert(
                        result.terrainAlignmentLists,
                        { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                            type = 'LESS',
                            optional = true,
                            faces =  {{
                                { 0, -_yHalfSize, _height - 1}, { 0, _yHalfSize, _height - 1},
                                { _bridgeLen, _yHalfSize, _height - 1}, { _bridgeLen, -_yHalfSize, _height - 1},
                            }}
                        }
                    )
                    -- table.insert(
                    --     result.terrainAlignmentLists,
                    --     { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                    --         type = 'EQUAL',
                    --         optional = true,
                    --         faces =  { }
                    --     }
                    -- )
                elseif _bridgeChunkLength >= 4 then -- model
                    local modelId = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. 'bridge_chunk_' .. tostring(_bridgeChunkLength) .. 'm.mdl'
                    local transf = _transfUtilsUG.mul(
                        _transfUtilsUG.rotZ(math.rad(_paramReaders.getBridgeChunkZAngle(params))),
                        _transfUtilsUG.mul(
                            {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, _height, 1},
                            _transfUtilsUG.rotY(math.rad(_paramReaders.getBridgeChunkYAngle(params)))
                        )
                    )
                    table.insert(
                        result.models,
                        {
                            id = modelId,
                            transf = transf,
                        }
                    )

                    local _faceDZ = -0.5
                    local _bridgeFaces = { {
                        {_bridgeChunkLength, -_yHalfSize, _faceDZ, 1},
                        {_bridgeChunkLength, _yHalfSize, _faceDZ, 1},
                        {0, _yHalfSize, _faceDZ, 1},
                        {0, -_yHalfSize, _faceDZ, 1}
                    } }
                    local terrainFaces = {{
                        type = 'LESS',
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = _bridgeFaces,
                    }}
                    _modulesutilUG.TransformAlignmentFaces(transf, terrainFaces)
                    table.insert(result.terrainAlignmentLists, terrainFaces[1])
                end
            end

            xpcall(
                function()
                    _addBase()
                    _addBridge()
                end,
                _myErrorHandler
            )

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
