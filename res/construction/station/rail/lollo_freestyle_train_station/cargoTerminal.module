local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local logger = require('lollo_freestyle_train_station.logger')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		-- categories = { "cargo", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	-- skipCollision = true,
	type = _constants.cargoTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		local _terminalData = params.terminals[nTerminal]
		local _cps = _terminalData.centrePlatformsRelative
		local _eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, 1)

		moduleHelpers.edges.addEdges(result, tag, params, nTerminal, _terminalData)
		-- logger.infoOut('freestyleTrainStation result.edgeLists =', result.edgeLists})
		moduleHelpers.platforms.addPlatform(result, tag, slotId, params, nTerminal, _terminalData, _eraPrefix)

		-- result.models[#result.models + 1] = {
		-- 	id = _constants.terminalModelFileName,
		-- 	slotId = slotId,
		-- 	transf = slotTransf,
		-- 	tag = tag
		-- }

		local laneZ = result.laneZs[nTerminal]
		local isTrackOnPlatformLeft = _terminalData.isTrackOnPlatformLeft
		-- local zShift = laneZ + moduleHelpers.getZShiftFor0mPlatform(result, nTerminal)

		local stationSignModelId = (_eraPrefix == moduleHelpers.eras.era_c.prefix)
			and 'lollo_freestyle_train_station/asset/era_c_cargo_station_sign.mdl'
			or 'lollo_freestyle_train_station/asset/era_a_cargo_station_sign.mdl'
		local lampsModelId = 'lollo_freestyle_train_station/asset/era_c_cargo_lamps_sodium.mdl'
			if _eraPrefix == moduleHelpers.eras.era_a.prefix then lampsModelId = 'lollo_freestyle_train_station/asset/era_a_cargo_lamps.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_b.prefix then lampsModelId = 'lollo_freestyle_train_station/asset/era_b_cargo_lamps.mdl'
			end

		if logger.isExtendedLog() then
			if isTrackOnPlatformLeft then
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/icon/green.mdl',
					slotId = slotId,
					transf = slotTransf,
					tag = tag
				}
			else
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/icon/red.mdl',
					slotId = slotId,
					transf = slotTransf,
					tag = tag
				}
			end
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/icon/orange.mdl',
				slotId = slotId,
				transf = {
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					_cps[1].posTanX2[1][1][1], _cps[1].posTanX2[1][1][2], _cps[1].posTanX2[1][1][3], 1
				},
				tag = tag
			}
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/icon/blue.mdl',
				slotId = slotId,
				transf = {
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					_cps[#_cps].posTanX2[2][1][1], _cps[#_cps].posTanX2[2][1][2], _cps[#_cps].posTanX2[2][1][3], 1
				},
				tag = tag
			}
		end
		-- start from 3 to avoid deco peeping out of the platform
		for i = 3, #_cps - 1, 6 do
			local cpl = _cps[i]
			local platformWidth = cpl.width
			-- sign near the track
			local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.2 or -platformWidth * 0.5 + 0.2
			-- sign 4.8 m from the track
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = stationSignModelId,
				slotId = slotId,
				-- transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  4, yShift, laneZ, 1 }),
				transf = transfUtils.getTransf_Shifted(transf, {4, yShift, laneZ}),
				tag = tag
			}
		end
		for i = 4, #_cps - 1, 6 do
			local cpl = _cps[i]
			local platformWidth = cpl.width
			local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.2 or -platformWidth * 0.5 + 0.2
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/cargo_perron_number.mdl',
				slotId = slotId,
				-- transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  2, yShift, laneZ, 1 }),
				transf = transfUtils.getTransf_ZRotatedP90_Shifted(transf, {2, yShift, laneZ}),
				tag = tag
			}
			-- the model index must be in base 0 !
			result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal)}
		end
		for i = 2, #_cps - 1, 4 do
			local cpl = _cps[i]
			local platformWidth = cpl.width
			local yShift = 0 -- isTrackOnPlatformLeft and platformWidth + 1.0 or -platformWidth - 1.0
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = lampsModelId,
				slotId = slotId,
				-- transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, yShift, laneZ, 1 }),
				transf = transfUtils.getTransf_ZRotatedP90_Shifted(transf, {0, yShift, laneZ}),
				tag = tag
			}
		end
		if _eraPrefix ~= moduleHelpers.eras.era_a.prefix then
			for i = 4, #_cps - 1, 4 do
				local cpl = _cps[i]
				local platformWidth = cpl.width
				local yShift = 0 --isTrackOnPlatformLeft and platformWidth + 1.0 or -platformWidth - 1.0
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/cargo_speakers.mdl',
					slotId = slotId,
					-- transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, laneZ, 1 }),
					transf = transfUtils.getTransf_Shifted(transf, {0, yShift, laneZ}),
					tag = tag
				}
			end
		end

		logger.infoOut('cargoTerminal.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = _constants.idTransf,
			},
		}
	end
}

end
