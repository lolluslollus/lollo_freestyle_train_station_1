local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "cargo-road-access", "cargo-road-access-axial", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("FlatCargoArea10x5Name"),
			description = _("FlatCargoArea10x5Desc"),
			icon = "ui/lollo_freestyle_train_station/flatCargoArea8x5.tga"
		},
		metadata = { },
		order = {
			value = 18,
		},
		type = _constants.flatCargoArea8x5ModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			local _terminalData = params.terminals[nTerminal]
			local zAdjustedTransf = transfUtils.getTransf_XShifted(
				moduleHelpers.flatAreas.getMNZShiftedTransf(params, slotId, slotTransf),
				2.5
			)

			local cpl = _terminalData.centrePlatformsRelative[nTrackEdge]
			local _eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, nTrackEdge)

			local myGroundFacesFillKey = moduleHelpers.getGroundFacesFillKey_cargo(result, nTerminal, _eraPrefix)
			local platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_area10x5.mdl'
			if _eraPrefix == moduleHelpers.eras.era_a.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_area10x5.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_b.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_area10x5.mdl'
			end
			if result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_earth.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/earth_area10x5.mdl'
			elseif result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_gravel.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/gravel_area10x5.mdl'
			end
			result.models[#result.models + 1] = {
				id = platformModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			local portalModelId = nil
			if _eraPrefix == moduleHelpers.eras.era_a.prefix then
				portalModelId = 'lollo_freestyle_train_station/asset/cargo_portal_dark_4x4.mdl'
			else
				portalModelId = 'lollo_freestyle_train_station/asset/cargo_portal_4x4.mdl'
			end
			result.models[#result.models + 1] = {
				id = portalModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/railroad/flatSides/cargo/lanes_area10x5.mdl',
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			if baseId == _constants.idBases.axialStation5MSlotId then
				moduleHelpers.axialAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			else
				moduleHelpers.flatAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			end

			local groundFace = {
				{-3, -6, 0, 1},
				{-3, 6, 0, 1},
				{6, 6, 0, 1},
				{6, -6, 0, 1},
			}
			modulesutil.TransformFaces(zAdjustedTransf, groundFace)
			result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(groundFace, myGroundFacesFillKey)

			local terrainAlignmentList = {
				faces = {
					{
						{-2.5, -6, _constants.platformSideBitsZ, 1},
						{-2.5, 6, _constants.platformSideBitsZ, 1},
						{1, 6, _constants.platformSideBitsZ, 1},
						{1, -6, _constants.platformSideBitsZ, 1},
					},
					{
						{1, -6, _constants.platformSideBitsZ, 1},
						{1, 6, _constants.platformSideBitsZ, 1},
						{6, 6, -_constants.stairsAndRampHeight -0.25, 1},
						{6, -6, -_constants.stairsAndRampHeight -0.25, 1},
					}
				},
				optional = true,
				slopeHigh = _constants.slopeHigh,
				slopeLow = _constants.slopeLow,
				type = 'EQUAL',
			}
			for _, face in pairs(terrainAlignmentList.faces) do
				modulesutil.TransformFaces(zAdjustedTransf, face)
			end
			result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_area10x5.mdl',
					transf = _constants.idTransf,
				},
				moduleHelpers.flatAreas.getPreviewIcon(params),
			}
		end
	}
end
