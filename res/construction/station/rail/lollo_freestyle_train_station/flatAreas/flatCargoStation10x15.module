local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "cargo-road-access", "cargo-road-access-axial", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("FlatCargoStation10x15Name"),
			description = _("FlatCargoStation10x15Desc"),
			icon = "ui/lollo_freestyle_train_station/flatCargoStation8x15.tga"
		},
		metadata = {
			moreCapacity = {
				cargo = 30,
				passenger = 0
			},
			stationSquareShift_XYZ_rotZ = {
				x = 12.5,
				y = 0.0,
				z = -_constants.stairsAndRampHeight + _constants.platformSideBitsZ,
				rotZ = 0.0
			}
		},
		order = {
			value = 33,
		},
		type = _constants.flatCargoArea8x10ModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			local _terminalData = params.terminals[nTerminal]
			local zAdjustedTransf = transfUtils.getTransf_XShifted(
				moduleHelpers.flatAreas.getMNZShiftedTransf(params, slotId, slotTransf),
				5
			)

			local cpl = _terminalData.centrePlatformsRelative[nTrackEdge]
			local _eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, nTrackEdge)

			local myGroundFacesFillKey = moduleHelpers.getGroundFacesFillKey_cargo(result, nTerminal, _eraPrefix)

			local stationModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_10x15.mdl'
			if _eraPrefix == moduleHelpers.eras.era_a.prefix then
				stationModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_10x15.mdl'
			end
			result.models[#result.models + 1] = {
				id = stationModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			local platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_station_platform_10x15.mdl'
			if _eraPrefix == moduleHelpers.eras.era_b.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_platform_10x15.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_a.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_platform_10x15.mdl'
			end
			if result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_earth.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/earth_station_platform_10x15.mdl'
			elseif result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_gravel.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/gravel_station_platform_10x15.mdl'
			end
			result.models[#result.models + 1] = {
				id = platformModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			if baseId == _constants.idBases.axialStation0MSlotId then
				moduleHelpers.axialAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			else
				moduleHelpers.flatAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			end

			local groundFace = {
				{-5.0, -6, -_constants.stairsAndRampHeight, 1},
				{-5.0, 6, -_constants.stairsAndRampHeight, 1},
				{9.0, 6, -_constants.stairsAndRampHeight, 1},
				{9.0, -6, -_constants.stairsAndRampHeight, 1},
			}
			modulesutil.TransformFaces(zAdjustedTransf, groundFace)
			result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(groundFace, myGroundFacesFillKey)

			local terrainAlignmentList = {
				faces = {
					groundFace,
				},
				optional = true,
				slopeHigh = _constants.slopeHigh,
				slopeLow = _constants.slopeLow,
				type = 'EQUAL',
			}
			result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList

			if baseId ~= _constants.idBases.axialStation0MSlotId then
				table.insert(result.slots, {
					id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.cargoStationSquareOuterSlotId),
					shape = 1,
					spacing = {1, 1, 2, 2},
					-- transf = transfUtilsUG.mul(
					-- 	zAdjustedTransf,
					-- 	{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  7.5, 0, -_constants.stairsAndRampHeight + _constants.platformSideBitsZ, 1 }
					-- ),
					transf = transfUtils.getTransf_Shifted(
						zAdjustedTransf,
						{7.5, 0, -_constants.stairsAndRampHeight + _constants.platformSideBitsZ}
					),
					type = _constants.cargoStationSquareModuleType,
				})
			end
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_10x15.mdl',
					transf = _constants.idTransf,
				},
				moduleHelpers.flatAreas.getPreviewIcon(params),
			}
		end
	}
end
