local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "cargo-road-access", "cargo-road-access-axial", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("FlatCargoStation30x28Name"),
			description = _("FlatCargoStation30x28Desc"),
			icon = "ui/lollo_freestyle_train_station/flatCargoStation30x28.tga"
		},
		metadata = {
			nSegments2Minus = 1,
			nSegments2Plus = 1,
			widthOnOwnTerminalHead = 30,
			moreCapacity = {
				cargo = 180,
				passenger = 0
			},
			-- stationSquareShift_XYZ_rotZ = {
			-- 	x = 22.8,
			-- 	y = 12.5,
			-- 	z = _constants.platformSideBitsZ,
			--  rotZ = 0.0
			-- }
		},
		order = {
			value = 36,
		},
		type = _constants.flatCargoArea8x10ModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			local _terminalData = params.terminals[nTerminal]
			if baseId == _constants.idBases.axialStation0MSlotId then -- ad hoc
				local yShift = nTrackEdge == 1
					and (_terminalData.isTrackOnPlatformLeft and 10 or -10)
					or (_terminalData.isTrackOnPlatformLeft and -10 or 10)
				slotTransf = transfUtils.getTransf_YShifted(slotTransf, yShift)
			end

			local zAdjustedTransf = transfUtils.getTransf_XShifted(
				moduleHelpers.flatAreas.getMNZShiftedTransf(params, slotId, slotTransf),
				5
			)

			local _eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, nTrackEdge)

			local myGroundFacesFillKey = moduleHelpers.getGroundFacesFillKey_cargo(result, nTerminal, _eraPrefix)
			local buildingModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_station_30x28.mdl'
			if _eraPrefix == moduleHelpers.eras.era_b.prefix then
				buildingModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_30x28.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_a.prefix then
				buildingModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_30x28.mdl'
			end
			result.models[#result.models + 1] = {
				id = buildingModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			local platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_station_platform_30x28.mdl'
			if _eraPrefix == moduleHelpers.eras.era_b.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_platform_30x28.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_a.prefix then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_platform_30x28.mdl'
			end
			if result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_earth.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/earth_station_platform_30x28.mdl'
			elseif result.platformStyles[nTerminal] == _constants.cargoPlatformStyles.cargo_gravel.moduleFileName then
				platformModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/gravel_station_platform_30x28.mdl'
			end
			result.models[#result.models + 1] = {
				id = platformModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			if baseId == _constants.idBases.axialStation0MSlotId then
				moduleHelpers.axialAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			else
				moduleHelpers.flatAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			end

			local groundFace = {
				{-5.5, -15.5, _constants.platformSideBitsZ, 1},
				{-5.5, 15.5, _constants.platformSideBitsZ, 1},
				{23.5, 15.5, _constants.platformSideBitsZ, 1},
				{23.5, -15.5, _constants.platformSideBitsZ, 1},
			}
			modulesutil.TransformFaces(zAdjustedTransf, groundFace)
			result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(groundFace, myGroundFacesFillKey)

			local terrainAlignmentList = {
				faces = {
					groundFace,
				},
				optional = true,
				slopeHigh = _constants.slopeHigh,
				slopeLow = _constants.slopeLow,
				type = 'EQUAL',
			}
			result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList

			if baseId ~= _constants.idBases.axialStation0MSlotId then
				table.insert(result.slots, {
					id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.cargoStationSquareOuterSlotId),
					shape = 1,
					spacing = {1, 1, 2, 2},
					transf = transfUtils.getTransf_Shifted(
						zAdjustedTransf,
						{22.8, 7.5, _constants.platformSideBitsZ}
					),
					type = _constants.cargoStationSquareModuleType,
				})
				if nTrackEdge > 1 then
					table.insert(result.slots, {
						id = result.mangleId(nTerminal, nTrackEdge - 1, _constants.idBases.cargoStationSquareOuterSlotId),
						shape = 1,
						spacing = {1, 1, 2, 2},
						transf = transfUtils.getTransf_Shifted(
							zAdjustedTransf,
							{22.8, -7.5, _constants.platformSideBitsZ}
						),
						type = _constants.cargoStationSquareModuleType,
					})
				end
			end
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_30x28.mdl',
					transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -20, 0, 0, 1},
				},
				moduleHelpers.flatAreas.getPreviewIcon(params),
			}
		end
	}
end
